---
alwaysApply: true
---

# Development Agent Workflow - Cursor Rules

## Primary Directive
You are a development agent implementing a project. Follow established documentation and maintain consistency.

## Core Workflow Process

### Before Starting Any Task
- Consult `/Docs/Implementation.md` for current stage and available tasks
- Check task dependencies and prerequisites
- Verify scope understanding

### Task Execution Protocol

#### 1. Task Assessment
- Read subtask from `/Docs/Implementation.md`
- Assess subtask complexity:
  - **Simple subtask:** Implement directly
  - **Complex subtask:** Create a todo list using the todo_write tool

#### 2. Documentation Research
- Check `/Docs/Implementation.md` for relevant documentation links in the subtask
- Read and understand documentation before implementing

#### 3. UI/UX Implementation
- Consult `/Docs/UI_UX_doc.md` before implementing any UI/UX elements
- Follow design system specifications and responsive requirements

#### 4. Project Structure Compliance
- Check `/Docs/project_structure.md` before:
  - Running commands
  - Creating files/folders
  - Making structural changes
  - Adding dependencies

#### 5. Error Handling
- Check `/Docs/Bug_tracking.md` for similar issues before fixing
- Document all errors and solutions in Bug_tracking.md
- Include error details, root cause, and resolution steps

#### 6. Task Completion
Mark tasks complete only when:
- All functionality implemented correctly
- Code follows project structure guidelines
- UI/UX matches specifications (if applicable)
- No errors or warnings remain
- All task list items completed (if applicable)

### File Reference Priority
1. `/Docs/Bug_tracking.md` - Check for known issues first
2. `/Docs/Implementation.md` - Main task reference
3. `/Docs/project_structure.md` - Structure guidance
4. `/Docs/UI_UX_doc.md` - Design requirements

## Critical Rules
- **NEVER** skip documentation consultation
- **NEVER** mark tasks complete without proper testing
- **NEVER** ignore project structure guidelines
- **NEVER** implement UI without checking UI_UX_doc.md
- **NEVER** fix errors without checking Bug_tracking.md first
- **ALWAYS** document errors and solutions
- **ALWAYS** follow the established workflow process
- **ALWAYS** use todo_write tool for complex tasks

## CemAI Project Specific Guidelines

### PRD Compliance
- Reference `/PRD.md` for feature requirements and user stories
- Ensure all implementations align with the three core epics:
  1. "Glass Cockpit" - Situational Awareness
  2. "Co-Pilot" - Human-AI Collaboration  
  3. "Oracle" - On-Demand Intelligence

### Technology Stack Requirements
- **Frontend:** React + Vite + shadcn/ui + Tailwind CSS
- **Component Organization:** Follow shadcn/ui conventions (ui/ and shared/ separation)
- **State Management:** Consider Zustand for global state
- **API Integration:** Centralized in /src/api/ directory

### Key Feature Implementation Order
1. **Foundation:** Setup development environment and project structure
2. **Glass Cockpit:** KPI dashboard, predictive health glyphs, master control log
3. **Co-Pilot:** Autonomy controls, decision hub modal, decision history
4. **Oracle:** Chat interface, context-aware suggestions, proactive assistance

### Quality Standards
- Dashboard must load in under 3 seconds
- Real-time data updates with less than 2-second lag
- WCAG 2.1 Level AA accessibility compliance
- Responsive design for industrial control room environments

### Security Considerations
- Implement Role-Based Access Control (RBAC)
- Secure API communication with CemAI Agent Swarm
- Handle connection interruptions gracefully

Remember: Build a cohesive, well-documented, and maintainable project. Every decision should support overall project goals and maintain consistency with established patterns. Focus on creating trust between operators and the AI system through transparent, intuitive interfaces.